import fs from "fs";
import path from "path";
import { execSync } from "child_process";

const parserDirectory = "src/parsers";
const pegjsDirectory = "pegjs";

// Get a list of all .pegjs files in the pegjs directory
const pegjsFiles = fs
  .readdirSync(pegjsDirectory)
  .filter((file) => file.endsWith(".pegjs"));

// Create an array to keep track of generated parser files
const generatedParserFiles = [];

// Loop through the .pegjs files and generate parser files for each
pegjsFiles.forEach((file) => {
  const inputFilePath = path.join(pegjsDirectory, file);
  const outputFileName = path.basename(file, ".pegjs") + "Parser.cjs";
  const outputFilePath = path.join(parserDirectory, outputFileName);

  // Run the pegjs command for each file to generate the parser
  try {
    execSync(`peggy -o "${outputFilePath}" "${inputFilePath}"`, {
      stdio: "inherit",
    });
    console.log(`Compiled ${inputFilePath} to ${outputFilePath}`);
    generatedParserFiles.push(outputFilePath);
  } catch (error) {
    console.error(`Error compiling ${inputFilePath}: ${error.message}`);
  }
});

// Create an index.js file that exports all parser files
const indexFilePath = path.join(parserDirectory, "index.mjs");
const indexFileContent =
  `/*
 * This file is auto-generated by npm build-parsers
 */\n\n` +
  generatedParserFiles
    .map((file) => {
      const parserName = path.basename(file, ".cjs");
      return `import * as ${parserName} from "./${parserName}.cjs";`;
    })
    .join("\n") +
  "\n\n" +
  `export {\n${generatedParserFiles
    .map((file) => {
      const parserName = path.basename(file, ".cjs");
      return `    ${parserName},`;
    })
    .join("\n")}\n};`;

try {
  fs.writeFileSync(indexFilePath, indexFileContent);
  console.log(`Created ${indexFilePath}`);
} catch (error) {
  console.error(`Error creating ${indexFilePath}: ${error.message}`);
}

// Delete all files in the parser directory that are not in the generatedParserFiles array
fs.readdirSync(parserDirectory).forEach((file) => {
  const filePath = path.join(parserDirectory, file);
  if (!generatedParserFiles.includes(filePath) && file.endsWith("Parser.cjs")) {
    fs.unlinkSync(filePath);
    console.log(`Deleted ${filePath}`);
  }
});
