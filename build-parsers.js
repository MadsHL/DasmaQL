const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const parserDirectory = 'src/parsers';
const pegjsDirectory = 'pegjs';

// Get a list of all .pegjs files in the pegjs directory
const pegjsFiles = fs.readdirSync(pegjsDirectory).filter(file => file.endsWith('.pegjs'));

// Create an array to keep track of generated parser files
const generatedParserFiles = [];

// Loop through the .pegjs files and generate parser files for each
pegjsFiles.forEach(file => {
    const inputFilePath = path.join(pegjsDirectory, file);
    const outputFileName = path.basename(file, '.pegjs') + 'Parser.js';
    const outputFilePath = path.join(parserDirectory, outputFileName);

    // Run the pegjs command for each file to generate the parser
    try {
        execSync(`peggy -o "${outputFilePath}" "${inputFilePath}"`, { stdio: 'inherit' });
        console.log(`Compiled ${inputFilePath} to ${outputFilePath}`);
        generatedParserFiles.push(outputFilePath);
    } catch (error) {
        console.error(`Error compiling ${inputFilePath}: ${error.message}`);
    }
});

// Create an index.js file that exports all parser files
const indexFilePath = path.join(parserDirectory, 'index.js');
const indexFileContent = `/*
 * This file is auto-generated by npm build-parsers
 */\n\n` +
    generatedParserFiles.map(file => {
        const parserName = path.basename(file, '.js');
        return `const ${parserName} = require('./${parserName}');`;
    }).join('\n') + '\n\n' + `module.exports = {\n${generatedParserFiles.map(file => {
        const parserName = path.basename(file, '.js');
        return `    ${parserName},`;
    }).join('\n')}\n};`;

try {
    fs.writeFileSync(indexFilePath, indexFileContent);
    console.log(`Created ${indexFilePath}`);
} catch (error) {
    console.error(`Error creating ${indexFilePath}: ${error.message}`);
}

// Delete all files in the parser directory that are not in the generatedParserFiles array
fs.readdirSync(parserDirectory).forEach(file => {
    const filePath = path.join(parserDirectory, file);
    if (!generatedParserFiles.includes(filePath) && file.endsWith('Parser.js')) {
        fs.unlinkSync(filePath);
        console.log(`Deleted ${filePath}`);
    }
});
